import os
import requests
import json
import re
from tqdm import tqdm  # Import tqdm for the progress bar

# Function to scan JavaScript libraries and check versions
def scan_libraries(js_urls, nvd_api_key):
    for js_url in tqdm(js_urls, desc="Scanning JavaScript libraries", unit="URL"):
        # Download JavaScript file content
        js_content = download_js(js_url)
        if js_content:
            # Extract version information from the JavaScript file
            version_info = extract_version_info_from_js(js_content)

            # Check if version information is found
            if version_info:
                print(f"Version information found in: {js_url}")

                # Extract CVEs based on the identified version
                cve_info = find_cves(version_info, nvd_api_key)

                # Generate a report for the library
                generate_report(js_url, version_info, cve_info)
            else:
                print(f"No version information found in the JavaScript content for {js_url}")

# Function to download JavaScript file
def download_js(js_url):
    try:
        response = requests.get(js_url)
        response.raise_for_status()
        return response.text.lower()  # Convert to lowercase for case-insensitive matching
    except Exception as e:
        print(f"Error downloading JavaScript file from {js_url}: {e}")
        return None

# Function to extract version information from a JavaScript file
def extract_version_info_from_js(js_content):
    # You might need to adjust the pattern based on the actual structure of the JavaScript file
    version_match = re.search(r'version:\s*["\']?([0-9.]+)', js_content)
    if version_match:
        version_info = version_match.group(1)
        return version_info
    else:
        return None

# Function to find CVEs based on version information
def find_cves(version_info, nvd_api_key):
    try:
        # Use the provided API key URL as the NVD API endpoint
        nvd_api_endpoint = f"https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-{version_info}.json.zip?key={nvd_api_key}"

        # Search for CVEs using the NVD API
        response = requests.get(nvd_api_endpoint)
        response.raise_for_status()
        nvd_data = response.json()

        # Extract CVEs based on the identified version
        cve_info = [item for item in nvd_data.get('CVE_Items', []) if version_info in item.get('cve', {}).get('description', {}).get('description', '').lower()]

        if cve_info:
            return cve_info
        else:
            return None

    except Exception as e:
        print(f"Error finding CVEs: {e}")
        return None

# Function to generate a report
def generate_report(js_url, version_info, cve_info):
    try:
        # Use a relative path to save reports in the main code folder
        report_dir = "reports"
        os.makedirs(report_dir, exist_ok=True)

        # Create a report file
        report_file = os.path.join(report_dir, f"{os.path.basename(js_url)}_report.json")

        # Write information to the report file
        report_data = {
            "JavaScript file URL": js_url,
            "Version information": version_info,
            "CVEs": cve_info
        }

        with open(report_file, 'w') as f:
            json.dump(report_data, f, indent=2)

        print(f"Report generated for {js_url}: {report_file}")

    except Exception as e:
        print(f"Error generating report: {e}")

# Read URLs from js.txt or any other file containing JavaScript URLs
with open("js.txt", "r") as js_file:
    js_urls = js_file.read().splitlines()

# Replace 'your_current_api_key_here' with the provided API key
nvd_api_key = "your_current_api_key_here"

# Execute the scan
scan_libraries(js_urls, nvd_api_key)
